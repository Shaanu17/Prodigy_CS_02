from PIL import Image

def encrypt_image(input_image_path, output_image_path, key):
    # Open the image
    img = Image.open(input_image_path)
    pixels = img.load()  # Load pixel data

    # Loop through each pixel and apply encryption
    for i in range(img.size[0]):  # img.size[0] is the width
        for j in range(img.size[1]):  # img.size[1] is the height
            r, g, b = pixels[i, j]
            # Encrypt the pixel by modifying each RGB value with the key (XOR operation)
            pixels[i, j] = (r ^ key, g ^ key, b ^ key)

    # Save the encrypted image
    img.save(output_image_path)
    print(f"Encrypted image saved as {output_image_path}")

def decrypt_image(encrypted_image_path, output_image_path, key):
    # Open the encrypted image
    img = Image.open(encrypted_image_path)
    pixels = img.load()

    # Loop through each pixel and apply decryption
    for i in range(img.size[0]):
        for j in range(img.size[1]):
            r, g, b = pixels[i, j]
            # Decrypt the pixel by reversing the encryption operation
            pixels[i, j] = (r ^ key, g ^ key, b ^ key)

    # Save the decrypted image
    img.save(output_image_path)
    print(f"Decrypted image saved as {output_image_path}")

# Example usage
if __name__ == "__main__":
    # Encrypt the image
    input_image = "input_image.jpg"  # Path to the input image
    encrypted_image = "encrypted_image.png"  # Path to save the encrypted image
    decrypted_image = "decrypted_image.png"  # Path to save the decrypted image
    key = 123  # The encryption/decryption key

    # Encrypt and save the image
    encrypt_image(input_image, encrypted_image, key)

    # Decrypt the encrypted image and save
    decrypt_image(encrypted_image, decrypted_image, key)
